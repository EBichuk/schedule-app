// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.

package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /next_takings/{user_id})
	NextTaking(ctx echo.Context, userId int) error

	// (POST /schedule)
	CreateSchedule(ctx echo.Context) error

	// (GET /schedule/{user_id}/{schedule_id})
	GetScheduleById(ctx echo.Context, userId int, scheduleId int) error

	// (GET /schedules/{user_id})
	GetSchedulesByUser(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NextTaking converts echo context to params.
func (w *ServerInterfaceWrapper) NextTaking(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NextTaking(ctx, userId)
	return err
}

// CreateSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSchedule(ctx)
	return err
}

// GetScheduleById converts echo context to params.
func (w *ServerInterfaceWrapper) GetScheduleById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "schedule_id" -------------
	var scheduleId int

	err = runtime.BindStyledParameterWithOptions("simple", "schedule_id", ctx.Param("schedule_id"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schedule_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScheduleById(ctx, userId, scheduleId)
	return err
}

// GetSchedulesByUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesByUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesByUser(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/next_takings/:user_id", wrapper.NextTaking)
	router.POST(baseURL+"/schedule", wrapper.CreateSchedule)
	router.GET(baseURL+"/schedule/:user_id/:schedule_id", wrapper.GetScheduleById)
	router.GET(baseURL+"/schedules/:user_id", wrapper.GetSchedulesByUser)

}